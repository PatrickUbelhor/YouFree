openapi: 3.0.2
info:
  title: YouFree?
  description: An application that makes it easier to find spare time for studying and hanging out with friends.
  version: v0.1
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'http://216.171.4.52:8080/api/v1'
    description: Production server. Endpoints are less frequently changed. For public use.
  - url: 'http://216.171.4.52:8081/api/v1'
    description: Dev server. Endpoints are frequently changed and updated.

paths:
  /hello:
    get:
      summary: Hello World
      description: Returns a plain text "Hello World" message. Useful to see if you can properly communicate with the server.
      operationId: hello
      responses:
        '200':
          description: Successful operation.
          content:
            text/plain:
              schema:
                type: string

  /login:
    get:
      summary: Endpoint for a user to log into the application
      description: Authenticates the user and returns a session token to use with further requests.
      operationId: login
      parameters:
        - name: username
          in: header
          description: The username of the user to authenticate.
          required: true
          schema:
            type: string
        - name: password
          in: header
          description: The password of the user to authenticate.
          required: true
          schema:
            type: string
            format: password
      responses:
        '200':
          $ref: '#/components/responses/UserLogin'
        '401':
          description: Incorrect password.
          content:
            text/plain:
              schema:
                type: string
        '404':
          $ref: '#/components/responses/UserNotFound'

  /user:
    post:
      summary: Create a new user
      description: Registers a new user with the application. Does NOT return a session token (does not log the user in).
      operationId: createUser
      requestBody:
        description: New user to add to the system.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '201':
          $ref: '#/components/responses/UserLogin'
        '400':
          description: Fields cannot be null or empty.
        '409':
          description: One or more User fields must be unique, but is already taken by another User.
    get:
      summary: Retrieve a user
      description: "Attempts to find a user with one of the given attributes. If multiple are specified,
      the first attribute to match (as given in the ordering below) is the one which returns the match.
      If no query parameters are given, this returns the info of the currently logged-in user."
      operationId: getUser
      parameters:
        - $ref: '#/components/parameters/Token'
        - name: id
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: snowflake
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: username
          in: query
          required: false
          schema:
            type: string
        - name: email
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/User'
        '404':
          $ref: '#/components/responses/UserNotFound'
    put:
      summary: Update a user
      description: "Alters the user's attributes to match that supplied in the request body. Attributes that don't need to be updated can be excluded from the body.
      Requires the target user to be logged-in (have a valid session token). Note that not all values can be changed (for example, User.id cannot be changed)."
      operationId: updateUser
      parameters:
        - $ref: '#/components/parameters/Token'
      requestBody:
        description: User object with updated attributes.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          $ref: '#/components/responses/User'
        '404':
          $ref: '#/components/responses/UserNotFound'
    delete:
      summary: Delete a user
      description: Deletes the given user from the server.
      parameters:
        - $ref: '#/components/parameters/Token'
      responses:
        '204':
          description: No content.
        '404':
          $ref: '#/components/responses/UserNotFound'

  /friends:
    get:
      summary: List friends of logged-in user
      description: Returns an array of User objects that are friends of the logged-in user.
      operationId: getFriends
      parameters:
        - $ref: '#/components/parameters/Token'
      responses:
        '200':
          $ref: '#/components/responses/UserList'

  /friends/discord:
    get:
      summary: List Discord snowflake IDs of friends of logged-in user
      description: Returns an array of Discord snowflakes that correspond to friends of the logged-in user. Any friends that do not have a Discord snowflake associated with their account are ignored.
      operationId: getDiscordFriends
      parameters:
        - name: snowflake
          description: The snowflake ID of the user in Discord.
          in: header
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
                  format: int64

  /schedule/{id}:
    get:
      summary: Get the schedule of the specified user
      description: ''
      operationId: getSchedule
      parameters:
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/Token'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        '404':
          $ref: '#/components/responses/UserNotFound'

  /schedule/discord/{snowflake}:
    get:
      summary: Get the schedule of the user with the associated Discord snowflake ID
      operationId: getDiscordSchedule
      parameters:
        - name: snowflake
          description: The snowflake ID of the user in Discord.
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        '404':
          description: User not found.

  /schedule:
    put:
      summary: Updates the schedule of the logged-in user.
      description: ''
      operationId: updateSchedule
      parameters:
        - $ref: '#/components/parameters/Token'
      requestBody:
        description: New user to add to the system.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeBlock'
      responses:
        '200':
          description: Successful operation.
        '404':
          $ref: '#/components/responses/UserNotFound'

components:
  parameters:
    UserID:
      name: id
      in: path
      description: The unique identification number of the User.
      required: true
      schema:
        type: integer
        format: int64
    Token:
      name: token
      in: header
      description: The session token of a user that is logged in.
      required: true
      schema:
        type: string

  schemas:
    Schedule:
      type: array
      items:
        type: array
        items:
          type: integer
          format: int32
    NewUser:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          format: password
        email:
          type: string
          format: email
    User:
      type: object
      description: Represents a user account on the server.
      properties:
        id:
          type: string
          readOnly: true
        discordSnowflake:
          type: integer
          format: int64
        username:
          type: string
        password:
          type: string
          format: password
          writeOnly: true
        email:
          type: string
          format: email
        schedule:
          type: object
          format: '#/components/schemas/Schedule'
          readOnly: true
    TimeBlock:
      type: object
      properties:
        day:
          type: integer
          format: int32
        block:
          type: integer
          format: int32
        status:
          type: integer
          format: int32

  responses:
    User:
      description: Successful operation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    UserLogin:
      $ref: '#/components/responses/User'
      headers:
        token:
          schema:
            type: string
    UserList:
      description: Successful operation.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
    UserNotFound:
      description: User not found.
      content:
        text/plain:
          schema:
            type: string

